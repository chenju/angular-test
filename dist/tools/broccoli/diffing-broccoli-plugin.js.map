{"version":3,"sources":["broccoli/diffing-broccoli-plugin.ts"],"names":["wrapDiffingPlugin","DiffingPluginWrapper","DiffingPluginWrapper.constructor","DiffingPluginWrapper.rebuild","DiffingPluginWrapper.relinkOutputAndCachePaths","DiffingPluginWrapper.init","DiffingPluginWrapper.cleanup"],"mappings":"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","file":"broccoli/diffing-broccoli-plugin.js","sourcesContent":["/// <reference path=\"broccoli.d.ts\" />\r\n/// <reference path=\"../typings/fs-extra/fs-extra.d.ts\" />\r\n/// <reference path=\"../typings/node/node.d.ts\" />\r\n\r\nimport fs = require('fs');\r\nimport fse = require('fs-extra');\r\nimport path = require('path');\r\nimport {TreeDiffer, DiffResult} from './tree-differ';\r\nlet symlinkOrCopy = require('symlink-or-copy');\r\n\r\n\r\nexport {DiffResult} from './tree-differ';\r\n\r\n\r\n/**\r\n * Makes writing diffing plugins easy.\r\n *\r\n * Factory method that takes a class that implements the DiffingBroccoliPlugin interface and returns\r\n * an instance of BroccoliTree.\r\n *\r\n * @param pluginClass\r\n * @returns {DiffingPlugin}\r\n */\r\nexport function wrapDiffingPlugin(pluginClass): DiffingPluginWrapperFactory {\r\n  return function() { return new DiffingPluginWrapper(pluginClass, arguments); };\r\n}\r\n\r\n\r\nexport interface DiffingBroccoliPlugin {\r\n  rebuild(diff: DiffResult): (Promise<any>| void);\r\n  cleanup ? () : void;\r\n}\r\n\r\n\r\ntype DiffingPluginWrapperFactory = (inputTrees: (BroccoliTree | BroccoliTree[]), options?) =>\r\n    BroccoliTree;\r\n\r\n\r\nclass DiffingPluginWrapper implements BroccoliTree {\r\n  treeDiffer: TreeDiffer;\r\n  initialized = false;\r\n  wrappedPlugin: DiffingBroccoliPlugin = null;\r\n  inputTree = null;\r\n  inputTrees = null;\r\n  description = null;\r\n\r\n  // props monkey-patched by broccoli builder:\r\n  inputPath = null;\r\n  cachePath = null;\r\n  outputPath = null;\r\n\r\n  constructor(private pluginClass, private wrappedPluginArguments) {\r\n    if (Array.isArray(wrappedPluginArguments[0])) {\r\n      this.inputTrees = wrappedPluginArguments[0];\r\n    } else {\r\n      this.inputTree = wrappedPluginArguments[0];\r\n    }\r\n\r\n    this.description = this.pluginClass.name;\r\n  }\r\n\r\n\r\n  rebuild() {\r\n    try {\r\n      let firstRun = !this.initialized;\r\n      this.init();\r\n\r\n      let diffResult = this.treeDiffer.diffTree();\r\n      diffResult.log(!firstRun);\r\n\r\n      var rebuildPromise = this.wrappedPlugin.rebuild(diffResult);\r\n\r\n      if (rebuildPromise) {\r\n        return (<Promise<any>>rebuildPromise).then(this.relinkOutputAndCachePaths.bind(this));\r\n      }\r\n\r\n      this.relinkOutputAndCachePaths();\r\n    } catch (e) {\r\n      e.message = `[${this.description}]: ${e.message}`;\r\n      throw e;\r\n    }\r\n  }\r\n\r\n\r\n  private relinkOutputAndCachePaths() {\r\n    // just symlink the cache and output tree\r\n    fs.rmdirSync(this.outputPath);\r\n    symlinkOrCopy.sync(this.cachePath, this.outputPath);\r\n  }\r\n\r\n\r\n  private init() {\r\n    if (!this.initialized) {\r\n      let includeExtensions = this.pluginClass.includeExtensions || [];\r\n      let excludeExtensions = this.pluginClass.excludeExtensions || [];\r\n      this.initialized = true;\r\n      this.treeDiffer = new TreeDiffer(this.inputPath, includeExtensions, excludeExtensions);\r\n      this.wrappedPlugin =\r\n          new this.pluginClass(this.inputPath, this.cachePath, this.wrappedPluginArguments[1]);\r\n    }\r\n  }\r\n\r\n\r\n  cleanup() {\r\n    if (this.wrappedPlugin.cleanup) {\r\n      this.wrappedPlugin.cleanup();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}