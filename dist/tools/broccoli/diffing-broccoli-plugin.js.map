{"version":3,"sources":["broccoli/diffing-broccoli-plugin.ts"],"names":["wrapDiffingPlugin","DiffingPluginWrapper","DiffingPluginWrapper.constructor","DiffingPluginWrapper.rebuild","DiffingPluginWrapper.relinkOutputAndCachePaths","DiffingPluginWrapper.init","DiffingPluginWrapper.cleanup"],"mappings":"AAAA,sCAAsC;AACtC,0DAA0D;AAC1D,kDAAkD;AAElD,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAG1B,4BAAqC,eAAe,CAAC,CAAA;AACrD,IAAI,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAM/C,AASA;;;;;;;;GADG;2BAC+B,WAAW;IAC3CA,MAAMA,CAACA,cAAa,MAAM,CAAC,IAAI,oBAAoB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAACA;AACjFA,CAACA;AAFe,yBAAiB,oBAEhC,CAAA;AAaD;IAaEC,8BAAoBA,WAAWA,EAAUA,sBAAsBA;QAA3CC,gBAAWA,GAAXA,WAAWA,CAAAA;QAAUA,2BAAsBA,GAAtBA,sBAAsBA,CAAAA;QAX/DA,gBAAWA,GAAGA,KAAKA,CAACA;QACpBA,kBAAaA,GAA0BA,IAAIA,CAACA;QAC5CA,cAASA,GAAGA,IAAIA,CAACA;QACjBA,eAAUA,GAAGA,IAAIA,CAACA;QAClBA,gBAAWA,GAAGA,IAAIA,CAACA;QAEnBA,4CAA4CA;QAC5CA,cAASA,GAAGA,IAAIA,CAACA;QACjBA,cAASA,GAAGA,IAAIA,CAACA;QACjBA,eAAUA,GAAGA,IAAIA,CAACA;QAGhBA,EAAEA,CAACA,CAACA,KAAKA,CAACA,OAAOA,CAACA,sBAAsBA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;YAC7CA,IAAIA,CAACA,UAAUA,GAAGA,sBAAsBA,CAACA,CAACA,CAACA,CAACA;QAC9CA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACNA,IAAIA,CAACA,SAASA,GAAGA,sBAAsBA,CAACA,CAACA,CAACA,CAACA;QAC7CA,CAACA;QAEDA,IAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA;IAC3CA,CAACA;IAGDD,sCAAOA,GAAPA;QACEE,IAAIA,CAACA;YACHA,IAAIA,QAAQA,GAAGA,CAACA,IAAIA,CAACA,WAAWA,CAACA;YACjCA,IAAIA,CAACA,IAAIA,EAAEA,CAACA;YAEZA,IAAIA,UAAUA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,QAAQA,EAAEA,CAACA;YAC5CA,UAAUA,CAACA,GAAGA,CAACA,CAACA,QAAQA,CAACA,CAACA;YAE1BA,IAAIA,cAAcA,GAAGA,IAAIA,CAACA,aAAaA,CAACA,OAAOA,CAACA,UAAUA,CAACA,CAACA;YAE5DA,EAAEA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA;gBACnBA,MAAMA,CAAgBA,cAAeA,CAACA,IAAIA,CAACA,IAAIA,CAACA,yBAAyBA,CAACA,IAAIA,CAACA,IAAIA,CAACA,CAACA,CAACA;YACxFA,CAACA;YAEDA,IAAIA,CAACA,yBAAyBA,EAAEA,CAACA;QACnCA,CAAEA;QAAAA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;YACXA,CAACA,CAACA,OAAOA,GAAGA,MAAIA,IAAIA,CAACA,WAAWA,WAAMA,CAACA,CAACA,OAASA,CAACA;YAClDA,MAAMA,CAACA,CAACA;QACVA,CAACA;IACHA,CAACA;IAGOF,wDAAyBA,GAAjCA;QACEG,AACAA,yCADyCA;QACzCA,EAAEA,CAACA,SAASA,CAACA,IAAIA,CAACA,UAAUA,CAACA,CAACA;QAC9BA,aAAaA,CAACA,IAAIA,CAACA,IAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,UAAUA,CAACA,CAACA;IACtDA,CAACA;IAGOH,mCAAIA,GAAZA;QACEI,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA;YACtBA,IAAIA,iBAAiBA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,iBAAiBA,IAAIA,EAAEA,CAACA;YACjEA,IAAIA,iBAAiBA,GAAGA,IAAIA,CAACA,WAAWA,CAACA,iBAAiBA,IAAIA,EAAEA,CAACA;YACjEA,IAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA;YACxBA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,wBAAUA,CAACA,IAAIA,CAACA,SAASA,EAAEA,iBAAiBA,EAAEA,iBAAiBA,CAACA,CAACA;YACvFA,IAAIA,CAACA,aAAaA;gBACdA,IAAIA,IAAIA,CAACA,WAAWA,CAACA,IAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,SAASA,EAAEA,IAAIA,CAACA,sBAAsBA,CAACA,CAACA,CAACA,CAACA,CAACA;QAC3FA,CAACA;IACHA,CAACA;IAGDJ,sCAAOA,GAAPA;QACEK,EAAEA,CAACA,CAACA,IAAIA,CAACA,aAAaA,CAACA,OAAOA,CAACA,CAACA,CAACA;YAC/BA,IAAIA,CAACA,aAAaA,CAACA,OAAOA,EAAEA,CAACA;QAC/BA,CAACA;IACHA,CAACA;IACHL,2BAACA;AAADA,CAtEA,AAsECA,IAAA","file":"broccoli/diffing-broccoli-plugin.js","sourcesContent":["/// <reference path=\"broccoli.d.ts\" />\n/// <reference path=\"../typings/fs-extra/fs-extra.d.ts\" />\n/// <reference path=\"../typings/node/node.d.ts\" />\n\nimport fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {TreeDiffer, DiffResult} from './tree-differ';\nlet symlinkOrCopy = require('symlink-or-copy');\n\n\nexport {DiffResult} from './tree-differ';\n\n\n/**\n * Makes writing diffing plugins easy.\n *\n * Factory method that takes a class that implements the DiffingBroccoliPlugin interface and returns\n * an instance of BroccoliTree.\n *\n * @param pluginClass\n * @returns {DiffingPlugin}\n */\nexport function wrapDiffingPlugin(pluginClass): DiffingPluginWrapperFactory {\n  return function() { return new DiffingPluginWrapper(pluginClass, arguments); };\n}\n\n\nexport interface DiffingBroccoliPlugin {\n  rebuild(diff: DiffResult): (Promise<any>| void);\n  cleanup ? () : void;\n}\n\n\ntype DiffingPluginWrapperFactory = (inputTrees: (BroccoliTree | BroccoliTree[]), options?) =>\n    BroccoliTree;\n\n\nclass DiffingPluginWrapper implements BroccoliTree {\n  treeDiffer: TreeDiffer;\n  initialized = false;\n  wrappedPlugin: DiffingBroccoliPlugin = null;\n  inputTree = null;\n  inputTrees = null;\n  description = null;\n\n  // props monkey-patched by broccoli builder:\n  inputPath = null;\n  cachePath = null;\n  outputPath = null;\n\n  constructor(private pluginClass, private wrappedPluginArguments) {\n    if (Array.isArray(wrappedPluginArguments[0])) {\n      this.inputTrees = wrappedPluginArguments[0];\n    } else {\n      this.inputTree = wrappedPluginArguments[0];\n    }\n\n    this.description = this.pluginClass.name;\n  }\n\n\n  rebuild() {\n    try {\n      let firstRun = !this.initialized;\n      this.init();\n\n      let diffResult = this.treeDiffer.diffTree();\n      diffResult.log(!firstRun);\n\n      var rebuildPromise = this.wrappedPlugin.rebuild(diffResult);\n\n      if (rebuildPromise) {\n        return (<Promise<any>>rebuildPromise).then(this.relinkOutputAndCachePaths.bind(this));\n      }\n\n      this.relinkOutputAndCachePaths();\n    } catch (e) {\n      e.message = `[${this.description}]: ${e.message}`;\n      throw e;\n    }\n  }\n\n\n  private relinkOutputAndCachePaths() {\n    // just symlink the cache and output tree\n    fs.rmdirSync(this.outputPath);\n    symlinkOrCopy.sync(this.cachePath, this.outputPath);\n  }\n\n\n  private init() {\n    if (!this.initialized) {\n      let includeExtensions = this.pluginClass.includeExtensions || [];\n      let excludeExtensions = this.pluginClass.excludeExtensions || [];\n      this.initialized = true;\n      this.treeDiffer = new TreeDiffer(this.inputPath, includeExtensions, excludeExtensions);\n      this.wrappedPlugin =\n          new this.pluginClass(this.inputPath, this.cachePath, this.wrappedPluginArguments[1]);\n    }\n  }\n\n\n  cleanup() {\n    if (this.wrappedPlugin.cleanup) {\n      this.wrappedPlugin.cleanup();\n    }\n  }\n}\n"],"sourceRoot":"/source/"}